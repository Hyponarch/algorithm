package LeetCode;

/**
 * 假设你正在爬楼梯。需要 n阶你才能到达楼顶。
 * 每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？
 * 注意：给定 n 是一个正整数。
 *
 * 示例 1：
 * 输入： 2
 * 输出： 2
 * 解释： 有两种方法可以爬到楼顶。
 * 1.  1 阶 + 1 阶
 * 2.  2 阶
 *
 * 示例 2：
 * 输入： 3
 * 输出： 3
 * 解释： 有三种方法可以爬到楼顶。
 * 1.  1 阶 + 1 阶 + 1 阶
 * 2.  1 阶 + 2 阶
 * 3.  2 阶 + 1 阶
 *
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/climbing-stairs
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 */
public class Problem_70 {
    class Solution {
        public int climbStairs(int n) {
            if(n < 2){
                return 1;
            }
            //这是一道非常典型的动态规划题
            //第一步，也是最重要的一步，是状态定义，
            //如何得到状态定义呢？
            //首先我们来考察问题本身：求到达楼顶的路径数，也就是到达第n阶的路径数
            //我们可以将dp数组dp定义为: dp[i]表示到达第i阶的路径数
            //判断无后效性和最优子结构
            //无后效性：从当前位置走到下一个位置时，跟如何走到当前位置是无关的。即前面的步骤对后面的步骤没有影响
            //最优子结构，
            //状态转移：
            //当前状态总是由过去状态转移得到，所以我们应当往前看
            //对于第i阶，可以由第i-1阶走一步或者i-2阶走2步得到
            //所以有dp[i] = dp[i-1] + dp[i-2]
            //边界条件因为dp[i]由dp[i-1]和dp[i-2]得到，所以我们需要特殊处理dp[0]和dp[1]
            int[] dp = new int[n+1];
            //dp[0] = 1是特殊处理，可以理解为初始放置到当前位置是一条路径，即[0]。正确性可以由dp[2]来论证，因为到达2有[0, 1, 2]和[0, 2]两条路径
            //即dp[2] = 2，而到达1有[0, 1]一条路径，即dp[1] = 1，而dp[2] = dp[1] + dp[0]，故dp[0] = 1

            dp[0] = 1;
            dp[1] = 1;
            for(int i = 2; i <= n; i++){
                dp[i] = dp[i-1] + dp[i-2];
            }
            return dp[n];
        }
    }
}
